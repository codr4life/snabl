* switch pc/return_pc to OpImp
** swap pc to local var before manipulating in ops
* remove Scope ptr from Call
** remove Call arg from Fimp imp
** capture env by ref int fimp lambdas
* capture ntries in State
** restore on recall
** remove restore_all
*** replace with individual calls
* add push/pop fns
** stack/str
** add pop for iter
* add for: loop
** Iter For ... Next
** alloc iter in op like Try.state
** For takes Iter op as arg
** Next takes For op as arg and jumps if more
* add bench: macro
** replaces fn
* add stack bench
** push/pop range of ints
** wrap each int in nested stack/list
* add Type.clone
** push clone of arg
** clone pushed values in Push/Get ops
* add Quote form
** contain quoted like Query
** push quoted ids as syms
** push quoted literals as is
* change forms::TypeList to contain form like Query
** rename to Fimp
** remove no_type
*** map _ to Maybe instead
* add stack/str eqval
* add include: macro
** one arg
** load all files into ops
** add bench/all.sl
* add Str literal support
** ''\'foo''
* add support for func/fimp refs with &
** add func/fimp type
* add use: macro
* add lib: macro
** two args, id & body
** allow anonymous, _
*** push anonymous libs in current scope
*** add lib op which contains the actual lib
*** use for local defs
* add load func
** call when called with args
* add type: Foo Int macro
** derive new type from parent
** generate constructor 
* add trait: Foo (Bar Baz) macro
** derive children from type

